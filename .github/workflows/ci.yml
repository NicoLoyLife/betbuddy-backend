name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ---
# WICHTIG: Die folgenden Datenbank-Zugangsdaten gelten NUR f√ºr die CI-Tests!
# F√ºr Entwicklung und Produktion stehen eigene Zugangsdaten in .env/.env.example
# ---

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8
      - name: Lint with black
        run: |
          black --check . > black.log 2>&1 || echo "BLACK_FAILED=1" >> $GITHUB_ENV
      - name: Lint with flake8
        run: |
          flake8 . > flake8.log 2>&1 || echo "FLAKE8_FAILED=1" >> $GITHUB_ENV
      - name: Upload Lint Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs
          path: |
            black.log
            flake8.log

  test:
    runs-on: ubuntu-latest
    needs: lint
    env:
      POSTGRES_DB: betbuddy_test
      POSTGRES_USER: betbuddy_test
      POSTGRES_PASSWORD: betbuddy_test
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_DEBUG: 'False'
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_DB: betbuddy_test
          POSTGRES_USER: betbuddy_test
          POSTGRES_PASSWORD: betbuddy_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U betbuddy_test" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django
      - name: Run Django migrations
        run: |
          python manage.py migrate
      - name: Run tests
        run: |
          pytest tests/ > test.log 2>&1 || echo "TEST_FAILED=1" >> $GITHUB_ENV
      - name: Upload Test Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: test.log

  integration:
    runs-on: ubuntu-latest
    needs: test
    env:
      POSTGRES_DB: betbuddy_test
      POSTGRES_USER: betbuddy_test
      POSTGRES_PASSWORD: betbuddy_test
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_DEBUG: 'False'
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_DB: betbuddy_test
          POSTGRES_USER: betbuddy_test
          POSTGRES_PASSWORD: betbuddy_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U betbuddy_test" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests
      - name: Run Integration Tests
        run: |
          pytest tests/test_integration_urls.py > integrationtest.log 2>&1 || echo "INTEGRATION_TEST_FAILED=1" >> $GITHUB_ENV
      - name: Upload Integration Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-log
          path: integrationtest.log

  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, integration]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Download all logs
        uses: actions/download-artifact@v4
        with:
          path: ./logs
      - name: Sende Discord-Benachrichtigung
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          MSG="üì¢ [${{ github.repository }}] ${{ github.event_name }} auf \`${{ github.ref }}\` von ${{ github.actor }} (${{ github.sha }})"
          DETAILS=""
          if [ -f ./logs/lint-logs/black.log ] && grep -qE '^error:' ./logs/lint-logs/black.log; then
            DETAILS="$DETAILS\n‚ùå Black-Fehler:\n\`\`\`\n$(tail -n 20 ./logs/lint-logs/black.log)\n\`\`\`"
          fi
          if [ -f ./logs/lint-logs/flake8.log ] && [ -s ./logs/lint-logs/flake8.log ]; then
            DETAILS="$DETAILS\n‚ùå Flake8-Fehler:\n\`\`\`\n$(tail -n 20 ./logs/lint-logs/flake8.log)\n\`\`\`"
          fi
          if [ -f ./logs/test-log/test.log ] && grep -qE 'FAILED|ERROR' ./logs/test-log/test.log; then
            DETAILS="$DETAILS\n‚ùå Django-Test-Fehler:\n\`\`\`\n$(tail -n 20 ./logs/test-log/test.log)\n\`\`\`"
          fi
          if [ -f ./logs/integration-log/integrationtest.log ] && grep -qE 'FAILED|ERROR' ./logs/integration-log/integrationtest.log; then
            DETAILS="$DETAILS\n‚ùå Integrationstest fehlgeschlagen:\n\`\`\`\n$(tail -n 20 ./logs/integration-log/integrationtest.log)\n\`\`\`"
          fi
          if [ -z "$DETAILS" ]; then
            DETAILS="\n‚úÖ Alle Checks erfolgreich!"
          fi
          MSG="$MSG$DETAILS"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$MSG\"}" $DISCORD_WEBHOOK 